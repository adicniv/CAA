<?php
class {
    /**
     * ― 在整个数据集上训练，使用一段时间的 Cascade2 训练算法。
     * @param unknown $param
     * @return string
     */
    function fann_cascadetrain_on_data($param) {
        ;
        return "";
    }
    /**
     * ― 读取文件并在整个数据集上训练，使用 Cascade2 训练算法训练一段时间
     * @param unknown $param
     * @return string
     */
    function fann_cascadetrain_on_file($param) {
        ;
        return "";
    }
    /**
     * ― 清除缩放参数
     * @param unknown $param
     * @return string
     */
    function fann_clear_scaling_params($param) {
        ;
        return "";
    }
    /**
     * ― 创建一个 fann 结构体的副本。
     * @param unknown $param
     * @return string
     */
    function fann_copy($param) {
        ;
        return "";
    }
    /**
     * ― 从配置文件中构建一个反向传播神经网络
     * @param unknown $param
     * @return string
     */
    function fann_create_from_file($param) {
        ;
        return "";
    }
    /**
     * ― 创建一个含快捷连接而非全连接的标准反向传播神经网络。
     * @param unknown $param
     * @return string
     */
    function fann_create_shortcut_array($param) {
        ;
        return "";
    }
    /**
     * ― 创建一个含快捷连接而非全连接的标准反向传播神经网络。
     * @param unknown $param
     * @return string
     */
    function fann_create_shortcut($param) {
        ;
        return "";
    }
    /**
     * ― 创建一个标准的反向传播神经网络，该网络使用一个表示每层大小的数组来构造，但是并不是全连接的。
     * @param unknown $param
     * @return string
     */
    function fann_create_sparse_array($param) {
        ;
        return "";
    }
    /**
     * ― 创建一个标准的反向传播神经网络，该网络不是全连接。
     * @param unknown $param
     * @return string
     */
    function fann_create_sparse($param) {
        ;
        return "";
    }
    /**
     * ― 创建一个全连接的反向传播神经网络，该网络使用一个表示每层大小的数组来构造。
     * @param unknown $param
     * @return string
     */
    function fann_create_standard_array($param) {
        ;
        return "";
    }
    /**
     * ― 创建标准的全连接反向传播神经网络。
     * @param unknown $param
     * @return string
     */
    function fann_create_standard($param) {
        ;
        return "";
    }
    /**
     * ― 从用户提供的函数创建训练数据结构。
     * @param unknown $param
     * @return string
     */
    function fann_create_train_from_callback($param) {
        ;
        return "";
    }
    /**
     * ― 创建一个空的训练数据结构。
     * @param unknown $param
     * @return string
     */
    function fann_create_train($param) {
        ;
        return "";
    }
    /**
     * ― 在获取基于先前计算的参数之后，在输入向量中缩小数据
     * @param unknown $param
     * @return string
     */
    function fann_descale_input($param) {
        ;
        return "";
    }
    /**
     * ― 在获取基于先前计算的参数之后，在输出向量中缩小数据
     * @param unknown $param
     * @return string
     */
    function fann_descale_output($param) {
        ;
        return "";
    }
    /**
     * ― 基于先前计算的参数来缩小输入和输出数据
     * @param unknown $param
     * @return string
     */
    function fann_descale_train($param) {
        ;
        return "";
    }
    /**
     * ― 销毁训练数据。
     * @param unknown $param
     * @return string
     */
    function fann_destroy_train($param) {
        ;
        return "";
    }
    /**
     * ― 销毁整个网络并且适当地释放所有的关联内存。
     * @param unknown $param
     * @return string
     */
    function fann_destroy($param) {
        ;
        return "";
    }
    /**
     * ― 返回 fann 训练数据精确的副本。
     * @param unknown $param
     * @return string
     */
    function fann_duplicate_train_data($param) {
        ;
        return "";
    }
    /**
     * ― 返回激励函数
     * @param unknown $param
     * @return string
     */
    function fann_get_activation_function($param) {
        ;
        return "";
    }
    /**
     * ― 为提供的神经和网络层数返回激活陡度
     * @param unknown $param
     * @return string
     */
    function fann_get_activation_steepness($param) {
        ;
        return "";
    }
    /**
     * ― 获取网络中每一层的偏差数
     * @param unknown $param
     * @return string
     */
    function fann_get_bias_array($param) {
        ;
        return "";
    }
    /**
     * ― 返回训练期间使用的误差限制
     * @param unknown $param
     * @return string
     */
    function fann_get_bit_fail_limit($param) {
        ;
        return "";
    }
    /**
     * ― 失败位的数量
     * @param unknown $param
     * @return string
     */
    function fann_get_bit_fail($param) {
        ;
        return "";
    }
    /**
     * ― 返回级联激活函数的数量
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_activation_functions_count($param) {
        ;
        return "";
    }
    /**
     * ― 返回级联激活函数
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_activation_functions($param) {
        ;
        return "";
    }
    /**
     * ― 激活陡度的数量
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_activation_steepnesses_count($param) {
        ;
        return "";
    }
    /**
     * ― 返回级联激活陡度
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_activation_steepnesses($param) {
        ;
        return "";
    }
    /**
     * ― 返回级联候选变化分数
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_candidate_change_fraction($param) {
        ;
        return "";
    }
    /**
     * ― 返回候选限度
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_candidate_limit($param) {
        ;
        return "";
    }
    /**
     * ― 返回层叠候选停滞周期的数量
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_candidate_stagnation_epochs($param) {
        ;
        return "";
    }
    /**
     * ― 返回候选周期的最大值
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_max_cand_epochs($param) {
        ;
        return "";
    }
    /**
     * ― 返回输出周期的最大值
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_max_out_epochs($param) {
        ;
        return "";
    }
    /**
     * ― 返回最小的候选周期
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_min_cand_epochs($param) {
        ;
        return "";
    }
    /**
     * ― 返回最小输出周期
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_min_out_epochs($param) {
        ;
        return "";
    }
    /**
     * ― 返回候选组的数量
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_num_candidate_groups($param) {
        ;
        return "";
    }
    /**
     * ― 返回训练期间使用的候选数量
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_num_candidates($param) {
        ;
        return "";
    }
    /**
     * ― 返回级联输出变化分数
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_output_change_fraction($param) {
        ;
        return "";
    }
    /**
     * ― 返回级联输出停滞周期的数量
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_output_stagnation_epochs($param) {
        ;
        return "";
    }
    /**
     * ― 返回权重因子
     * @param unknown $param
     * @return string
     */
    function fann_get_cascade_weight_multiplier($param) {
        ;
        return "";
    }
    /**
     * ― 获取网络中的连接。
     * @param unknown $param
     * @return string
     */
    function fann_get_connection_array($param) {
        ;
        return "";
    }
    /**
     * ― 获取当网络创建时连接的使用率。
     * @param unknown $param
     * @return string
     */
    function fann_get_connection_rate($param) {
        ;
        return "";
    }
    /**
     * ― 返回最后一个错误数字。
     * @param unknown $param
     * @return string
     */
    function fann_get_errno($param) {
        ;
        return "";
    }
    
    /**
     * ― 返回最后的错误字符串。
     * @param unknown $param
     * @return string
     */
    function fann_get_errstr($param) {
        ;
        return "";
    }
    /**
     * ― 获取网络中每层的神经元数量。
     * @param unknown $param
     * @return string
     */
    function fann_get_layer_array($param) {
        ;
        return "";
    }
    /**
     * ― 返回学习动量
     * @param unknown $param
     * @return string
     */
    function fann_get_learning_momentum($param) {
        ;
        return "";
    }
    /**
     * ― 返回学习速率
     * @param unknown $param
     * @return string
     */
    function fann_get_learning_rate($param) {
        ;
        return "";
    }
    /**
     * ― 从网络中读取均方误差。
     * @param unknown $param
     * @return string
     */
    function fann_get_MSE($param) {
        ;
        return "";
    }
    /**
     * ― 获取所创建的神经网络类型
     * @param unknown $param
     * @return string
     */
    function fann_get_network_type($param) {
        ;
        return "";
    }
    /**
     * ― 获取输入神经元的数量。
     * @param unknown $param
     * @return string
     */
    function fann_get_num_input($param) {
        ;
        return "";
    }
    /**
     * ― 获取神经网络的层数
     * @param unknown $param
     * @return string
     */
    function fann_get_num_layers($param) {
        ;
        return "";
    }
    /**
     * ― 获取输出神经元的数量。
     * @param unknown $param
     * @return string
     */
    function fann_get_num_output($param) {
        ;
        return "";
    }
    /**
     * ― 返回衰退值，用于在 quickprop 训练迭代时衰减权重
     * @param unknown $param
     * @return string
     */
    function fann_get_quickprop_decay($param) {
        ;
        return "";
    }
    /**
     * ― 返回放大系数
     * @param unknown $param
     * @return string
     */
    function fann_get_quickprop_mu($param) {
        ;
        return "";
    }
    /**
     * ― 返回 RPROP 训练期间的衰减系数
     * @param unknown $param
     * @return string
     */
    function fann_get_rprop_decrease_factor($param) {
        ;
        return "";
    }
    /**
     * ― 返回最大步长
     * @param unknown $param
     * @return string
     */
    function fann_get_rprop_delta_max($param) {
        ;
        return "";
    }
    /**
     * ― 返回最小步长
     * @param unknown $param
     * @return string
     */
    function fann_get_rprop_delta_min($param) {
        ;
        return "";
    }
    /**
     * ― 返回初始步长
     * @param unknown $param
     * @return string
     */
    function fann_get_rprop_delta_zero($param) {
        ;
        return "";
    }
    /**
     * ― 返回 RPROP 训练的递增系数
     * @param unknown $param
     * @return string
     */
    function function_name($param) {
        ;
        return "";
    }
    /**
     * ― 返回 sarprop 步值的误差偏移
     * @param unknown $param
     * @return string
     */
    function fann_get_sarprop_step_error_shift($param) {
        ;
        return "";
    }
    /**
     * ― 返回 sarprop 算法步值的误差阈值系数
     * @param unknown $param
     * @return string
     */
    function fann_get_sarprop_step_error_threshold_factor($param) {
        ;
        return "";
    }
    /**
     * ― 返回 sarprop 算法温度
     * @param unknown $param
     * @return string
     */
    function fann_get_sarprop_temperature($param) {
        ;
        return "";
    }
    /**
     * ― 返回 sarprop 算法权重衰减变化值
     * @param unknown $param
     * @return string
     */
    function fann_get_sarprop_weight_decay_shift($param) {
        ;
        return "";
    }
    /**
     * ― 获取整个网络中所有的连接数。
     * @param unknown $param
     * @return string
     */
    function fann_get_total_connections($param) {
        ;
        return "";
    }
    /**
     * ― 获取整个网络中神经元的数量。
     * @param unknown $param
     * @return string
     */
    function fann_get_total_neurons($param) {
        ;
        return "";
    }
    /**
     * ― 返回训练中使用的停止函数。
     * @param unknown $param
     * @return string
     */
    function fann_get_train_stop_function($param) {
        ;
        return "";
    }
    /**
     * ― 返回训练算法
     * @param unknown $param
     * @return string
     */
    function fann_get_training_algorithm($param) {
        ;
        return "";
    }
    /**
     * ― 使用 Widrow 和 Nguyen 算法初始化权重
     * @param unknown $param
     * @return string
     */
    function fann_init_weights($param) {
        ;
        return "";
    }
    /**
     * ― 返回训练数据中训练模式的数量。
     * @param unknown $param
     * @return string
     */
    function fann_length_train_data($param) {
        ;
        return "";
    }
    /**
     * ― 合并训练数据。
     * @param unknown $param
     * @return string
     */
    function fann_merge_train_data($param) {
        ;
        return "";
    }
    /**
     * ― 返回训练数据中每个训练模式输入的数量。
     * @param unknown $param
     * @return string
     */
    function fann_num_input_train_data($param) {
        ;
        return "";
    }
    /**
     * ― 返回训练数据中每个训练模式输出的数量。
     * @param unknown $param
     * @return string
     */
    function fann_num_output_train_data($param) {
        ;
        return "";
    }
    /**
     * ― 打印错误字符串。
     * @param unknown $param
     * @return string
     */
    function fann_print_error($param) {
        ;
        return "";
    }
    /**
     * ― 给每个连接赋一个介于 min_weight 和 max_weight 之间的随机权重
     * @param unknown $param
     * @return string
     */
    function ann_randomize_weights($param) {
        ;
        return "";
    }
    /**
     * ― 读取存储训练数据的文件。
     * @param unknown $param
     * @return string
     */
    function fann_read_train_from_file($param) {
        ;
        return "";
    }
    /**
     * ― 重置最后的错误代码。
     * @param unknown $param
     * @return string
     */
    function fann_reset_errno($param) {
        ;
        return "";
    }
    /**
     * ― 重置最后的错误字符串。
     * @param unknown $param
     * @return string
     */
    function fann_reset_errstr($param) {
        ;
        return "";
    }
    /**
     * ― 重置网络中的均方误差。
     * @param unknown $param
     * @return string
     */
    function fann_reset_MSE($param) {
        ;
        return "";
    }
    /**
     * ― 将通过神经网络运行输入。
     * @param unknown $param
     * @return string
     */
    function fann_run($param) {
        ;
        return "";
    }
    /**
     * ― 将训练结构体保存至文件。
     * @param unknown $param
     * @return string
     */
    function fann_save_train($param) {
        ;
        return "";
    }
    /**
     * ― 将整个网络保存至配置文件
     * @param unknown $param
     * @return string
     */
    function fann_save($param) {
        ;
        return "";
    }
    /**
     * ― 在训练数据中缩放输入至指定范围
     * @param unknown $param
     * @return string
     */
    function fann_scale_input_train_data($param) {
        ;
        return "";
    }
    /**
     * ― 在以前计算参数的基础上，在训练之前放大输入向量中的数据
     * @param unknown $param
     * @return string
     */
    function fann_scale_input($param) {
        ;
        return "";
    }
    /**
     * ― 在训练数据中缩放输出至指定范围
     * @param unknown $param
     * @return string
     */
    function fann_scale_output_train_data($param) {
        ;
        return "";
    }
    /**
     * ― 在以前计算参数的基础上，在训练之前放大输出向量中的数据
     * @param unknown $param
     * @return string
     */
    function fann_scale_output($param) {
        ;
        return "";
    }
    /**
     * ― 在训练数据中缩放输入和输出到指定的范围
     * @param unknown $param
     * @return string
     */
    function fann_scale_train_data($param) {
        ;
        return "";
    }
    /**
     * ― 在以前计算参数的基础上，缩放输入和输出数据
     * @param unknown $param
     * @return string
     */
    function fann_scale_train($param) {
        ;
        return "";
    }
    /**
     * ― 为所有隐藏层设置激活函数
     * @param unknown $param
     * @return string
     */
    function fann_set_activation_function_hidden($param) {
        ;
        return "";
    }
    /**
     * ― 为已应用的层中所有的神经元设置激活函数。
     * @param unknown $param
     * @return string
     */
    function fann_set_activation_function_layer($param) {
        ;
        return "";
    }
    /**
     * ― 为输出层设置激活函数
     * @param unknown $param
     * @return string
     */
    function fann_set_activation_function_output($param) {
        ;
        return "";
    }
    /**
     * ― 为已应用的神经元和层设置激活函数
     * @param unknown $param
     * @return string
     */
    function fann_set_activation_function($param) {
        ;
        return "";
    }
    /**
     * ― 为所有隐藏层中所有的神经元设置激活函数陡度
     * @param unknown $param
     * @return string
     */
    function fann_set_activation_steepness_hidden($param) {
        ;
        return "";
    }
    /**
     * ― 为提供的层中所有的神经元设置激活陡度
     * @param unknown $param
     * @return string
     */
    function fann_set_activation_steepness_layer($param) {
        ;
        return "";
    }
    /**
     * ― 在输出层中设置激活陡度
     * @param unknown $param
     * @return string
     */
    function fann_set_activation_steepness_output($param) {
        ;
        return "";
    }
    /**
     * ― 为提供的神经元和层设置激活陡度
     * @param unknown $param
     * @return string
     */
    function fann_set_activation_steepness($param) {
        ;
        return "";
    }
    /**
     * ― 设置训练期间使用的误差
     * @param unknown $param
     * @return string
     */
    function fann_set_bit_fail_limit($param) {
        ;
        return "";
    }
    /**
     * ― 设置训练期间使用的回调函数
     * @param unknown $param
     * @return string
     */
    function fann_set_callback($param) {
        ;
        return "";
    }
    /**
     * ― 设置级联候选激活函数的数组
     * @param unknown $param
     * @return string
     */
    function fann_set_cascade_activation_functions($param) {
        ;
        return "";
    }
    /**
     * ― 设置级联候选激活陡度的数组。
     * @param unknown $param
     * @return string
     */
    function fann_set_cascade_activation_steepnesses($param) {
        ;
        return "";
    }
    /**
     * ― 设置级联候选更改分数
     * @param unknown $param
     * @return string
     */
    function fann_set_cascade_candidate_change_fraction($param) {
        ;
        return "";
    }
    /**
     * ― 设置候选限度
     * @param unknown $param
     * @return string
     */
    function fann_set_cascade_candidate_limit($param) {
        ;
        return "";
    }
    /**
     * ― 设置级联候选停止周期数
     * @param unknown $param
     * @return string
     */
    function fann_set_cascade_candidate_stagnation_epochs($param) {
        ;
        return "";
    }
    /**
     * ― 设置最大候选周期数
     * @param unknown $param
     * @return string
     */
    function fann_set_cascade_max_cand_epochs($param) {
        ;
        return "";
    }
    /**
     * ― 设置最大输出周期
     * @param unknown $param
     * @return string
     */
    function fann_set_cascade_max_out_epochs($param) {
        ;
        return "";
    }
    /**
     * ― 设置最小候选周期
     * @param unknown $param
     * @return string
     */
    function fann_set_cascade_min_cand_epochs($param) {
        ;
        return "";
    }
    /**
     * ― 设置最小输出周期
     * @param unknown $param
     * @return string
     */
    function fann_set_cascade_min_out_epochs($param) {
        ;
        return "";
    }
    /**
     * ― 设置候选组数量
     * @param unknown $param
     * @return string
     */
    function fann_set_cascade_num_candidate_groups($param) {
        ;
        return "";
    }
    /**
     * ― 设置级联输出改变分数
     * @param unknown $param
     * @return string
     */
    function fann_set_cascade_output_change_fraction($param) {
        ;
        return "";
    }
    /**
     * ― 设置级联输出停滞周期的值
     * @param unknown $param
     * @return string
     */
    function fann_set_cascade_output_stagnation_epochs($param) {
        ;
        return "";
    }
    /**
     * ― 设置权重因子
     * @param unknown $param
     * @return string
     */
    function fann_set_cascade_weight_multiplier($param) {
        ;
        return "";
    }
    /**
     * ― 设置错误记录保存的位置。
     * @param unknown $param
     * @return string
     */
    function fann_set_error_log($param) {
        ;
        return "";
    }
    /**
     * ― 根据训练数据计算将来使用的输入比例参数
     * @param unknown $param
     * @return string
     */
    function fann_set_input_scaling_params($param) {
        ;
        return "";
    }
    /**
     * ― 设置学习动量。
     * @param unknown $param
     * @return string
     */
    function fann_set_learning_momentum($param) {
        ;
        return "";
    }
    /**
     * ― 设置学习速率。
     * @param unknown $param
     * @return string
     */
    function fann_set_learning_rate($param) {
        ;
        return "";
    }
    /**
     * ― 根据训练数据计算将来使用的输出缩放参数
     * @param unknown $param
     * @return string
     */
    function fann_set_output_scaling_params($param) {
        ;
        return "";
    }
    /**
     * ― 设置quickprop算法衰减因子
     * @param unknown $param
     * @return string
     */
    function fann_set_quickprop_decay($param) {
        ;
        return "";
    }
    /**
     * ― 设置 quickprop 算法放大因子
     * @param unknown $param
     * @return string
     */
    function fann_set_quickprop_mu($param) {
        ;
        return "";
    }
    /**
     * ― 使用 RPROP 算法训练时，设置下降因子
     * @param unknown $param
     * @return string
     */
    function functfann_set_rprop_decrease_factorion_name($param) {
        ;
        return "";
    }
    /**
     * ― 设置最大步长
     * @param unknown $param
     * @return string
     */
    function fann_set_rprop_delta_max($param) {
        ;
        return "";
    }
    /**
     * ― 设置最小步长
     * @param unknown $param
     * @return string
     */
    function fann_set_rprop_delta_min($param) {
        ;
        return "";
    }
    /**
     * ― 设置初始步长
     * @param unknown $param
     * @return string
     */
    function fann_set_rprop_delta_zero($param) {
        ;
        return "";
    }
    /**
     * ― 使用 RPROP 算法训练时，设置增长因子
     * @param unknown $param
     * @return string
     */
    function fann_set_rprop_increase_factor($param) {
        ;
        return "";
    }
    /**
     * ― 设置 sarprop 算法的步误差偏移量
     * @param unknown $param
     * @return string
     */
    function fann_set_sarprop_step_error_shift($param) {
        ;
        return "";
    }
    /**
     * ― 设置 sarprop 算法的步误差阈值因子
     * @param unknown $param
     * @return string
     */
    function fann_set_sarprop_step_error_threshold_factor($param) {
        ;
        return "";
    }
    /**
     * ― 设置 sarprop 算法的温度
     * @param unknown $param
     * @return string
     */
    function fann_set_sarprop_temperature($param) {
        ;
        return "";
    }
    /**
     * ― 设置 sarprop 算法的权重衰减偏移值
     * @param unknown $param
     * @return string
     */
    function fann_set_sarprop_weight_decay_shift($param) {
        ;
        return "";
    }
    /**
     * ― 根据训练数据计算输入和输出缩放参数以供将来使用
     * @param unknown $param
     * @return string
     */
    function fann_set_scaling_params($param) {
        ;
        return "";
    }
    /**
     * ― 设置训练期间使用的错误函数。
     * @param unknown $param
     * @return string
     */
    function fann_set_train_error_function($param) {
        ;
        return "";
    }
    
    /**
     * ― 设置训练期间使用的停止函数。
     * @param unknown $param
     * @return string
     */
    function fann_set_train_stop_function($param) {
        ;
        return "";
    }
    /**
     * ― 设置训练算法。
     * @param unknown $param
     * @return string
     */
    function fann_set_training_algorithm($param) {
        ;
        return "";
    }
    /**
     * ― 在网络中设置一个连接。
     * @param unknown $param
     * @return string
     */
    function fann_set_weight_array($param) {
        ;
        return "";
    }
    /**
     * ― 在网络中设置一个连接。
     * @param unknown $param
     * @return string
     */
    function fann_set_weight($param) {
        ;
        return "";
    }
    /**
     * ― 打算训练数据，使顺序随机。
     * @param unknown $param
     * @return string
     */
    function fann_shuffle_train_data($param) {
        ;
        return "";
    }
    /**
     * ― 返回一个训练数据子集的副本。
     * @param unknown $param
     * @return string
     */
    function fann_subset_train_data($param) {
        ;
        return "";
    }
    /**
     * ― 使用训练数据来测试并且计算出 MSE .
     * @param unknown $param
     * @return string
     */
    function fann_test_data($param) {
        ;
        return "";
    }
    /**
     * ― 使用一组输入和一组期望的输出来测试。
     * @param unknown $param
     * @return string
     */
    function fann_test($param) {
        ;
        return "";
    }
    /**
     * ― 使用一组训练数据训练一个周期
     * @param unknown $param
     * @return string
     */
    function fann_train_epoch($param) {
        ;
        return "";
    }
    /**
     * ― 在整个数据集上训练一段时间。
     * @param unknown $param
     * @return string
     */
    function fann_train_on_data($param) {
        ;
        return "";
    }
    /**
     *  ― 在从某个文件读取的整个数据集上训练一段时间。
     * @param unknown $param
     * @return string
     */
    function fann_train_on_file($param) {
        ;
        return "";
    }
    /**
     *  ― 使用一个输入集和一个期望的输出集来迭代训练一次。
     * @param unknown $param
     * @return string
     */
    function fann_train($param) {
        ;
        return "";
    }
    
    
    
}